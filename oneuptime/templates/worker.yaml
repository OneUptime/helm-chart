# OneUptime worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-%s" $.Release.Name "worker"  }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app: {{ printf "%s-%s" $.Release.Name "worker"  }}
    app.kubernetes.io/part-of: oneuptime
    app.kubernetes.io/managed-by: Helm
    appname: oneuptime
    date: "{{ now | unixEpoch }}"
spec:
  selector:
    matchLabels:
      app: {{ printf "%s-%s" $.Release.Name "worker"  }}
  replicas: {{ $.Values.deployment.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ printf "%s-%s" $.Release.Name "worker"  }}
        date: "{{ now | unixEpoch }}"
        appname: oneuptime
    spec:
      {{- if $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if $.Values.podSecurityContext }}
      securityContext: {{- $.Values.podSecurityContext | toYaml | nindent 8 }}
      {{- end }}
      {{- if $.Values.affinity }}
      affinity: {{- $.Values.affinity | toYaml | nindent 8 }}
      {{- end }}
      {{- if $.Values.tolerations }}
      tolerations: {{- $.Values.tolerations | toYaml | nindent 8 }}
      {{- end }}
      {{- if $.Values.nodeSelector }}
      nodeSelector: {{- $.Values.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - image: {{ printf "%s/%s/%s:%s" $.Values.image.registry $.Values.image.repository "worker" $.Values.image.tag }}
          name: {{ printf "%s-%s" $.Release.Name "worker"  }}
          {{- if $.Values.startupProbe.enabled }}
          # Startup probe
          startupProbe:
            httpGet:
              path: /status/live
              port: {{ $.Values.port.worker }}
            periodSeconds: {{ $.Values.startupProbe.periodSeconds }}
            failureThreshold: {{ $.Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if $.Values.livenessProbe.enabled }}
          # Liveness probe
          livenessProbe:
            httpGet:
              path: /status/live
              port: {{ $.Values.port.worker }}
            periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
          {{- end }}
          {{- if $.Values.readinessProbe.enabled }}
          # Readyness Probe
          readinessProbe:
            httpGet:
              path: /status/ready
              port: {{ $.Values.port.worker }}
            periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ $.Values.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if $.Values.containerSecurityContext }}
          securityContext: {{- $.Values.containerSecurityContext | toYaml | nindent 12 }}
          {{- end }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          env:
            {{- include "oneuptime.env.common" . | nindent 12 }}
            {{- include "oneuptime.env.commonServer" . | nindent 12 }}
            {{- include "oneuptime.env.oneuptimeSecret" . | nindent 12 }}
            - name: PORT
              value: {{ $.Values.port.worker | quote }}
            - name: DISABLE_TELEMETRY
              value: {{ $.Values.worker.disableTelemetryCollection | quote }}
          ports:
            - containerPort: {{ $.Values.port.worker }}
              protocol: TCP
              name: http
      restartPolicy: {{ $.Values.image.restartPolicy }}

---

# OneUptime app Service
{{- $workerPorts := dict "port" $.Values.port.worker -}}
{{- $workerServiceArgs := dict "ServiceName" "worker" "Ports" $workerPorts "Release" $.Release "Values" $.Values -}}
{{- include "oneuptime.service" $workerServiceArgs }}
---

# OneUptime app autoscaler
{{- $workerAutoScalerArgs := dict "ServiceName" "worker" "Release" $.Release "Values" $.Values -}}
{{- include "oneuptime.autoscaler" $workerAutoScalerArgs }}
---